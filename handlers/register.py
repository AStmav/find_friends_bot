from aiogram import Bot
from aiogram.types import Message,CallbackQuery
from aiogram.fsm.context import FSMContext
from state.register import RegisterState
import re
import os
from utils.database import Database
from kb.send_location import location_kb
from kb.your_gender import gender_kb
from kb.find_friends import find_friends_kb




async def start_register(msg:Message, state:FSMContext, bot:Bot):
    db = Database(os.getenv('DATABASE_NAME')) #–ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ
    users = db.select_users_id(msg.from_user.id)
    if (users):
        await bot.send_message(msg.from_user.id, f"{users[1]} \n–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    else:
        await bot.send_message(msg.from_user.id,f"–û—Ç–ª–∏—á–Ω–æ üëç \n–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –∏–º—è üìù")
        await state.set_state(RegisterState.regName)

async def register_name(msg:Message, state:FSMContext, bot:Bot):
    await bot.send_message(msg.from_user.id,f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {msg.text} \n"
                     f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç \n"
                     f"‚ö†Ô∏è–ï—Å–ª–∏ –í–∞–º —É–∂–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å 18 –ª–µ—Ç‚ö†Ô∏è\n\n")
    await state.update_data(register_name=msg.text)
    await state.set_state(RegisterState.regAge)

async def register_age(msg: Message, state: FSMContext, bot: Bot):
    try:
        age = int(msg.text)
        if age >= 18:
            await state.update_data(register_age=age)
            msg_success = (f"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {age} \n"
                           f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–∞—à –ø–æ–ª üëå")
            await bot.send_message(msg.from_user.id, msg_success, reply_markup=gender_kb)
            await state.set_state(RegisterState.regGender)
        else:
            await bot.send_message(msg.from_user.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç.")
            await state.clear()
    except ValueError:
        await bot.send_message(msg.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.")

async def register_gender(call: CallbackQuery, state: FSMContext, bot: Bot):
    gender = None
    if call.data == "gender_male":
        gender = "–ú—É–∂—Å–∫–æ–π"
    elif call.data == "gender_female":
        gender = "–ñ–µ–Ω—Å–∫–∏–π"

    if gender:
        await state.update_data(register_gender=gender)
        msg_success = (f"–í–∞—à –ø–æ–ª: {gender} \n\n"
                       f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: üåç–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µüåç \n —á—Ç–æ–±—ã —è –ø–æ–º–æ–≥ –≤–∞–º –Ω–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π —Ä—è–¥–æ–º —Å –≤–∞–º–∏")
        await bot.send_message(call.from_user.id, msg_success, reply_markup=location_kb)
        await state.set_state(RegisterState.regGeo)
    else:
        await bot.send_message(call.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")


async def register_geo(msg:Message, state:FSMContext, bot:Bot):
    latitude = msg.location.latitude
    longitude = msg.location.longitude
    await bot.send_location(msg.chat.id, latitude, longitude)
    await bot.send_message(msg.from_user.id, f"–®–∏—Ä–æ—Ç–∞: {latitude}, –î–æ–ª–≥–æ—Ç–∞: {longitude}")
    await state.update_data(latitude=latitude, longitude=longitude)

    reg_data = await state.get_data()
    reg_name = reg_data.get('register_name')
    reg_age = reg_data.get('register_age')
    reg_gender = reg_data.get('register_gender')
    reg_geo = f"{latitude},{longitude}"

    msg_success = f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è : {reg_name} \n\n  –í–æ–∑—Ä–∞—Å—Ç :{reg_age} \n\n –ü–æ–ª :{reg_gender} \n\n –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è : {reg_geo} "
    await bot.send_message(msg.from_user.id,msg_success)

    db = Database(os.getenv('DATABASE_NAME'))
    db.add_user(reg_name, reg_age, reg_gender, reg_geo,  msg.from_user.id)
    await bot.send_message(msg.from_user.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üëç –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏. ‚úÖ",
                           reply_markup=find_friends_kb)

    await state.clear()




