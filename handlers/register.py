from aiogram import Bot
from aiogram.types import Message,location
from aiogram.fsm.context import FSMContext
from state.register import RegisterState
from kb.send_location import location_kb
import re
import os
from utils.database import Database




async def start_register(msg:Message, state:FSMContext, bot:Bot):
    db = Database(os.getenv('DATABASE_NAME')) #–ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ
    users = db.select_users_id(msg.from_user.id)
    if (users):
        await bot.send_message(msg.from_user.id, f"{users[1]} \n  –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    else:
        await bot.send_message(msg.from_user.id,f"–î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è üìå\n –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –í–∞—à–µ –∏–º—èüìù")
        await state.set_state(RegisterState.regName)

async def register_name(msg:Message, state:FSMContext, bot:Bot):
    await bot.send_message(msg.from_user.id,f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {msg.text} \n"
                     f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –±—ã—Ç—å –Ω–∞ —Å–≤—è–∑–∏ \n"
                     f"‚òéÔ∏è –§–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7xxxxxxxxxx\n\n"
                     f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –Ø —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ñ–æ—Ä–º–∞—Ç—É –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚ö†Ô∏è")
    await state.update_data(register_name=msg.text)
    await state.set_state(RegisterState.regPhone)

async def register_phone(msg:Message, state:FSMContext, bot:Bot):
    if (re.findall('^\+?[7][-\(]?\d{3}\)?-?\d{3}-?\d{2}-?\d{2}$', msg.text)):
        await state.update_data(register_phone=msg.text)
        msg_success = (f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω:{msg.text} \n"
                       f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üåç —á—Ç–æ–±—ã —è –ø–æ–º–æ–≥ –í–∞–º –Ω–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π —Ä—è–¥–æ–º —Å –í–∞–º–∏")
        await bot.send_message(msg.from_user.id,msg_success)
        await state.update_data(register_phone=msg.text)
        await state.set_state(RegisterState.regGeo)

    else:
        await bot.send_message(msg.from_user.id,f"–ù–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ ")


async def register_geo(msg:Message, state:FSMContext, bot:Bot):
    latitude = msg.location.latitude
    longitude = msg.location.longitude
    await bot.send_location(msg.chat.id, latitude, longitude)
    await bot.send_message(msg.from_user.id, f"–®–∏—Ä–æ—Ç–∞: {latitude}, –î–æ–ª–≥–æ—Ç–∞: {longitude}")
    await state.update_data(latitude=latitude, longitude=longitude)

    reg_data = await state.get_data()
    reg_name = reg_data.get('register_name')
    reg_phone = reg_data.get('register_phone')
    reg_geo = f"{latitude},{longitude}"

    msg_success = f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {reg_name} \n\n  –¢–µ–ª–µ—Ñ–æ–Ω:{reg_phone} –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è: {reg_geo}"
    await bot.send_message(msg.from_user.id,msg_success)

    db = Database(os.getenv('DATABASE_NAME'))
    db.add_user(reg_name,reg_phone,reg_geo, msg.from_user.id)

    await state.clear()




